import pandas as pd
import string


INPUT_FILENAME = 'reservations_high_occupancy.xlsx'
STATIONS = ["서울", "광명", "천안아산", "오송", "대전", "김천구미", "동대구", "부산"]
NUM_CARS = 8
SEATS_PER_CAR_ROWS = 15
SEATS_PER_CAR_COLS = "ABCD"
# --- 공통 함수 (엔진) ---

def load_seat_data():

    try:
        df = pd.read_excel(INPUT_FILENAME)
        print("✅ 엑셀 파일 로딩 성공!")
    except FileNotFoundError:
        print(f"🚨 에러: '{INPUT_FILENAME}' 파일을 찾을 수 없습니다.")
        return None

    seat_reservations = {}
    for record in df.to_dict('records'):
        seat_key = f"{record['car_no']}-{record['seat_no']}"
        if seat_key not in seat_reservations:
            seat_reservations[seat_key] = []
        seat_reservations[seat_key].append({
            "departure": record['departure_station'],
            "arrival": record['arrival_station']
        })
    return seat_reservations

def check_seat_reservation(all_seat_data, current_station, next_station, car_no, seat_no, stations_map):
    """특정 구간에서 좌석이 예매되었는지 확인하는 핵심 엔진 함수입니다."""
    seat_key = f"{car_no}-{seat_no}"
    current_idx = stations_map.get(current_station, -1)
    next_idx = stations_map.get(next_station, -1)

    if seat_key in all_seat_data:
        for booking in all_seat_data[seat_key]:
            departure_idx = stations_map.get(booking['departure'], -1)
            arrival_idx = stations_map.get(booking['arrival'], -1)
            if departure_idx <= current_idx and next_idx <= arrival_idx:
                return True  # 예매됨
    return False  # 예매되지 않음 (빈 좌석)


def simulate_api_request(seat_data, stations_map):
    print("\n" + "#"*50)
    print("### 기능 1: 실시간 좌석 확인 (API 시뮬레이션)")
    print("#"*50)

    current = "대전"
    next_st = "김천구미"
    car = 5
    seat = "7A"

    is_reserved = check_seat_reservation(seat_data, current, next_st, car, seat, stations_map)

    if is_reserved:
        print(f"✔️ 결과: {car}호차 {seat} 좌석은 현재 구간({current} -> {next_st})에 예매된 승객이 있습니다.")
    else:
        print(f"🚨 결과: {car}호차 {seat} 좌석은 현재 구간({current} -> {next_st})에 예매 기록이 없습니다! (무임승차 의심)")

def filter_all_empty_seats(seat_data, stations_map):

    all_possible_seats = []
    for car in range(1, NUM_CARS + 1):
        for row in range(1, SEATS_PER_CAR_ROWS + 1):
            for col in SEATS_PER_CAR_COLS:
                all_possible_seats.append((car, f"{row}{col}"))

    empty_seats_by_segment = {}
    for i in range(len(STATIONS) - 1):
        current_station = STATIONS[i]
        next_station = STATIONS[i+1]
        segment_key = f"{current_station} -> {next_station}"

        empty_seats_in_segment = []
        for car_no, seat_no in all_possible_seats:
            if not check_seat_reservation(seat_data, current_station, next_station, car_no, seat_no, stations_map):
                empty_seats_in_segment.append(f"{car_no}-{seat_no}")

        empty_seats_by_segment[segment_key] = empty_seats_in_segment

    return empty_seats_by_segment

def print_empty_seat_report(empty_seat_data):
    print("\n" + "#"*50)
    print("### 기능 2: 전체 구간별 빈 좌석 검색 결과")
    print("#"*50)

    for segment, empty_seats in empty_seat_data.items():
        print("\n" + "="*50)
        print(f"🛤️  구간: {segment}")
        print(f"✅ 빈 좌석 수: {len(empty_seats)} 석")
        if len(empty_seats) > 10:
             print(f"🪑 빈 좌석 목록 (일부): {', '.join(empty_seats[:10])} 등")
        else:
             print(f"🪑 빈 좌석 목록: {', '.join(empty_seats)}")
        print("="*50)


# --- 메인 실행 부분 ---

def main():
    """메인 실행 함수"""
    seat_data = load_seat_data()
    if not seat_data:
        return

    stations_map = {station: i for i, station in enumerate(STATIONS)}
    print("✅ 데이터 로드 및 'stations_map' 생성이 완료되었습니다.")

    simulate_api_request(seat_data, stations_map)

    empty_seat_database = filter_all_empty_seats(seat_data, stations_map)
    print_empty_seat_report(empty_seat_database)


if __name__ == "__main__":
    main()
